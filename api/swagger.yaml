openapi: 3.0.1
info:
  title: My Weather Service
  version: 1.0.0
servers:
- url: http://localhost:8080
tags:
- name: users
- name: Weather
paths:
  /users/:name/exists:
    get:
      tags:
        - users
      parameters:
        - in: path
          name: name 
          schema:
            type: string
          required: true
          description: User name to check existance
      summary: Проверка существования пользователя
      operationId: userExists
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
    
  /users/:name/favourites:
    get:
      tags:
        - users
      parameters:
        - in: path
          name: name 
          schema:
            type: string
          required: true
          description: User name to check favourites
      summary: Проверка фаворитов пользователя
      operationId: userFavourites
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                -  Favs
                -  Status
                properties:
                  Favs:
                    type: array
                    items:
                      type: string
                    description: Users favourites
                  Status:
                    type: boolean
                    description: is it even exists...?


  /users: 
    post: 
      tags:
        - users
      summary: Создание нового пользователя
      operationId: createUser
      requestBody:
        description: User to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
          "200":
            description: OK
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Status'

  /weather/current:
    get:
      tags:
        - Weather
      parameters:
        - in: query
          name: city 
          schema:
            type: string
          required: true
          description: City name to check weather
      summary: Проверка погоды в городе
      operationId: getWeather
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Weather'
        "400":
          description: city doesnt exists
    
  /users/:name/afavourites: 
    post: 
      tags:
        - users
      parameters:
        - in: path
          name: name 
          schema:
            type: string
          required: true
          description: User name to add favourite
      summary: Добавляем фаворитов для пользователя
      operationId: addUsersFavourites
      requestBody:
        description: Favourite to add
        required: true
        content:
          string:
            schema:
              description: A city to add 
      responses:
          "200":
            description: OK
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Status'
          "401":
            description: Unautorized

  /users/:name/dfavourites: 
    delete: 
      tags:
        - users
      parameters:
        - in: path
          name: name 
          schema:
            type: string
          required: true
          description: User name to delete favourite
      summary: Добавляем фаворитов для пользователя
      operationId: deleteUsersFavourite
      requestBody:
        description: Favourite to delete
        required: true
        content:
          string:
            schema:
              description: A city to delete 
      responses:
          "200":
            description: OK
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Status'
          "401":
            description: Unautorized

components:
  schemas:
    Status:
      type: object
      required:
      - status
      properties:
        status:
          type: boolean
          description: Answer on request

    User:
      type: object
      required:
      - name
      - password
      - favourites
      properties:
        name:
          type: string
          description: Username
        password:
          type: string
          description: Users password
        favourites:
          type: array
          items:
            type: string
          description: Doesnt matter

    Weather:
      type: object
      required:
      - UserCurr 
      - UserFore
      properties:
        UserCurr:
          type: object
          additionalProperties:
            type: object
            properties:
              code:
                type: string
              text:
                type: string
          description: Current weather
        UserFore:
          type: array
          items:
            type: object
            additionalProperties:
              type: object
              properties:
                code:
                  type: string
                text:
                  type: string
            description: Day's weather
          description: Weather forecast

  x-original-swagger-version: "2.0"      




